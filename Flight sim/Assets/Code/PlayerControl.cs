using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// Control code for the the player's game object.
/// Very approximate simulation of flight dynamics.
/// </summary>
public class PlayerControl : MonoBehaviour {
    /// <summary>
    /// Coefficient of draft for head winds
    /// </summary>
    [Header("Aerodynamic coefficients")]
    public float ForwardDragCoefficient = 0.01f;
    /// <summary>
    /// Drag coefficient for winds blowing up/down across wings
    /// </summary>
    public float VerticalDragCoefficient = 0.5f;
    /// <summary>
    /// Lift generated by the wings
    /// </summary>
    public float LiftCoefficient = 0.01f;

    /// <summary>
    /// How far the plane can tilt around the X axis
    /// </summary>
    [Header("Movement Speeds")]
    public float PitchRange = 45f;
    /// <summary>
    /// How far the plane can rotate about the Z axis
    /// </summary>
    public float RollRange = 45;
    /// <summary>
    /// How fast the plane yaws for a given degree of roll.
    /// </summary>
    public float RotationalSpeed = 5f;
    /// <summary>
    /// Thrust generated when the throttle is pulled back all the way.
    /// </summary>
    public float MaximumThrust = 20f;

    /// <summary>
    /// Text element for displaying status information
    /// </summary>
    [Header("HUD")]
    public Text StatusDisplay;
    /// <summary>
    /// Text element for displaying game-over text
    /// </summary>
    public Text GameOverText;

    /// <summary>
    /// Cached copy of the player's RigidBody component
    /// </summary>
    private Rigidbody playerRB;

    /// <summary>
    /// Magic layer mask code for the updraft(s)
    /// </summary>
    const int UpdraftLayerMask = 1 << 8;


    #region Internal flight state
    /// <summary>
    /// Current yaw (rotation about the Y axis)
    /// </summary>
    private float yaw;
    /// <summary>
    /// Current pitch (rotation about the X axis)
    /// </summary>
    private float pitch;
    /// <summary>
    /// Current roll (rotation about the Z axis)
    /// </summary>
    private float roll;
    /// <summary>
    /// Current thrust (forward force provided by engines
    /// </summary>
    private float thrust;


#endregion

    /// <summary>
    /// Initialize component
    /// </summary>
    internal void Start() {
        playerRB = GetComponent<Rigidbody>();
        playerRB.velocity = transform.forward*3;
    }

    void FixedUpdate()
    {
        roll = Mathf.Lerp(roll, (Input.GetAxis("Horizontal") * RollRange), ForwardDragCoefficient);
        pitch = Mathf.Lerp(pitch, (Input.GetAxis("Vertical") * PitchRange), ForwardDragCoefficient);
        yaw += -1 * roll * RotationalSpeed * Time.deltaTime;
        playerRB.MoveRotation(Quaternion.Euler(pitch, yaw, roll));
        thrust = Input.GetAxis("Thrust") * MaximumThrust;
        if (thrust > 0)
        {
            playerRB.AddForce(transform.forward * thrust);
        }
        var v_rel = playerRB.velocity;
        Collider[] hitColliders = Physics.OverlapSphere(transform.position, transform.localScale.x, LayerMask.GetMask("Updrafts"));
        foreach (var hitCollider in hitColliders)
        {
            if (hitCollider.GetComponent<Updraft>() != null)
            {
                v_rel = -1 * (hitCollider.GetComponent<Updraft>().WindVelocity - playerRB.velocity);
            }
        }
        var v_f = Vector3.Dot(-v_rel, transform.forward);
        // var liftForce = LiftCoefficient * Mathf.Pow(v_f, 2) * transform.up;
        playerRB.AddForce(LiftCoefficient * Mathf.Pow(v_f, 2) * transform.up);
        // var forwardDrag = Mathf.Sign(v_f) * ForwardDragCoefficient * Mathf.Pow(v_f, 2) * transform.forward;
        playerRB.AddForce(Mathf.Sign(v_f) * ForwardDragCoefficient * Mathf.Pow(v_f, 2) * transform.forward);
        var v_up = Vector3.Dot(-v_rel, transform.up);
        // var verticalDrag = Mathf.Sign(v_up) * VerticalDragCoefficient * Mathf.Pow(v_f, 2) * transform.up;
        playerRB.AddForce(Mathf.Sign(v_up) * VerticalDragCoefficient * Mathf.Pow(v_up, 2) * transform.up);
    }

    /// <summary>
    /// Show game-over display
    /// </summary>
    /// <param name="safe">True if we won, false if we crashed</param>
    private void OnGameOver(bool safe) {
        playerRB.velocity = Vector3.zero;
        playerRB.useGravity = false;
        playerRB.constraints = RigidbodyConstraints.FreezeAll;
        if (safe) {
            GameOverText.text = "You Win!";
        } else {
            GameOverText.text = "OOPS";
        }
    }

    private void OnCollisionEnter(Collision collision)
    {
        if (collision.collider.GetComponent<LandingPlatform>() != null && playerRB.velocity.y < collision.collider.GetComponent<LandingPlatform>().MaxLandingSpeed)
        {
            OnGameOver(true);
        }
        else
        {
            OnGameOver(false);
        }
    }

    /// <summary>
    /// Display status information
    /// </summary>
    internal void OnGUI()
    {
        StatusDisplay.text = string.Format("Speed: {0:00.00}    altitude: {1:00.00}    Thrust {2:0.0}",
            playerRB.velocity.magnitude,
            transform.position.y,
            thrust);
    }
}
